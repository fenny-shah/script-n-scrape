Q1)
import numpy as np
import time
arr_nonvectorized = np.random.rand(1000, 1000)
arr_vectorized = np.array(arr_nonvectorized)

def multiply_non_vectorized(array):
    rows = len(array)
    cols = len(array[0])
    result = np.zeros((rows, cols))
    for i in range(rows):
        for j in range(cols):
            result[i][j] = array[i][j] * 3
    return result

def multiply_vectorized(array):
    return array * 3

start_nv = time.time()
end_nv = time.time()
print("Time taken in non-vectorized approach:", 1000*(end_nv-start_nv), "ms")

start_v = time.time()
end_v = time.time()
print("Time taken in vectorized approach:", 1000*(end_v-start_v), "ms")

Results:
Time taken in non-vectorized approach: 0.0016689300537109375 ms
Time taken in vectorized approach: 0.0007152557373046875 ms

Q2)
import numpy as np
import time
A = np.random.rand(500, 500)
B = np.random.rand(500, 500)
C_nonvectorized = np.zeros((500, 500)) 
def multiply_matrices_non_vectorized(A, B):
    rows_A, cols_A = len(A), len(A[0])
    rows_B, cols_B = len(B), len(B[0])
    assert cols_A == rows_B, "Number of columns of A must equal number of rows of B"
    for i in range(rows_A):
        for j in range(cols_B):
            for k in range(cols_A):  
                C_nonvectorized[i][j] += A[i][k] * B[k][j]
                return C_nonvectorized
            
def multiply_matrices_vectorized(A, B):
    return np.dot(A, B)

start_nv = time.time()
end_nv = time.time()
print("Time taken in non-vectorized approach:", 1000 * (end_nv - start_nv), "ms")
start_v = time.time()
end_v = time.time()
print("Time taken in vectorized approach:", 1000 * (end_v - start_v), "ms")

Results:
Time taken in non-vectorized approach: 0.0007152557373046875 ms
Time taken in vectorized approach: 0.0011920928955078125 ms
